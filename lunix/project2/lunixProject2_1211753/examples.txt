The `print()` function in Python is a built-in function used to display text, variables, and other information to the console or output stream.

It is a fundamental tool for providing output, debugging, and communicating results in Python programs.

The `print()` function can accept one or more arguments and is highly versatile, allowing customization of the displayed output.

print: print('Hello, World!') - Displays the string 'Hello, World!' to the console.


The `len()` function in Python is a built-in function used to determine the length or the number of elements in various data structures, such as strings, lists, tuples, dictionaries, and more. It is a versatile tool for getting the size or count of elements, which is useful for tasks like iterating over sequences or checking if a container is empty.

To use the `len()` function, you simply pass the data structure or object as an argument, and it returns an integer representing the length. For example, `len("Hello")` will return `5`, and `len([1, 2, 3, 4, 5])` will return `5`. The `len()` function is a helpful utility for various programming tasks in Python.

len: len('Hello') - Returns the length of the string 'Hello', which is 5.
A list in Python is a versatile and widely used data structure that allows you to store and manipulate a collection of items. Lists are ordered, mutable (modifiable), and can contain elements of different data types.

You can create lists by enclosing elements in square brackets, separated by commas. Lists support various operations such as appending, extending, slicing, and iterating through elements, making them an essential tool for managing collections of data in Python.

list: list([1, 2, 3]) - Converts the iterable into a list.

A dictionary in Python is a fundamental data structure used to store data in key-value pairs. It is an unordered and mutable collection that allows you to access and manipulate values based on their associated keys.

To create a dictionary, you enclose key-value pairs in curly braces, separated by colons, like this: `{'key1': 'value1', 'key2': 'value2'}`. Dictionary keys are unique, immutable, and serve as the identifiers for their corresponding values.

Dictionaries offer efficient look-up operations, making them suitable for tasks like storing configuration settings, caching data, or representing structured information. They are an essential data structure in Python for various programming tasks.

dict: dict([(1, 'one'), (2, 'two')]) - Creates a dictionary with the given key-value pairs.

An `int` in Python refers to the integer data type, representing whole numbers without fractional parts. Integers can be positive or negative and are commonly used for arithmetic operations and counting.

int: int('10') - Converts the string '10' to an integer.

The max() function returns the largest item in an iterable or the
largest of two or more arguments. If an iterable like a list or a
tuple is provided, it returns the item with the highest value.
max: max([1, 2, 3]) will return 3.

The min() function in Python returns the smallest item from an iterable or the smallest
of two or more arguments. It is used to find the
lowest value in a sequence.
min: min([4, 2, 8]) would return 2.

The map() function applies a given function to each item of an
iterable (like a list) and returns an iterator. It is often used for transforming data.
map: map(lambda x: x * 2, [1, 2, 3]) would double each element in the list.

The len() function is used to determine the number of items in a container
like a list, string, or dictionary. It is often used to find out how many
elements are in a collection.
len: len([1, 2, 3]) would return 3.

The sum() function calculates the total of all numerical values in an iterable.
It adds up all the elements in the given sequence.
sum: sum([1, 2, 3]) would return 6.

The sorted() function returns a new sorted list from the elements of any iterable.
It can be customized with key functions for complex sorting.
sorted: sorted([3, 1, 2]) would return [1, 2, 3].

The range() function generates a sequence of numbers. It is commonly
used in loops to repeat actions a certain number of times.
range: range(3) would generate the numbers 0, 1, 2.

The enumerate() function adds a counter to an iterable and returns it as
an enumerate object. This is often used in loops to get both the index and the value.
enumerate: enumerate(['a', 'b', 'c']) would return (0, 'a'), (1, 'b'), (2, 'c').

The zip() function combines several iterables into tuples, pairing up elements based on
their position. It's often used for parallel iteration.
zip: zip([1, 2], ['a', 'b']) would return (1, 'a'), (2, 'b').

The filter() function constructs an iterator from elements of an
iterable for which a function returns true. It is used to filter collections.
filter: filter(lambda x: x > 1, [1, 2, 3]) would return [2, 3].

The type() function returns the type of an object. This is often used
to find the class type of a variable.
type: type(123) would return <class 'int'>.

The abs() function returns the absolute value of a number, which is the number's distance from zero.
It works on both integers and floating-point numbers.
abs: abs(-5) would return 5.

The round() function rounds a floating-point number to a specified number of decimal places
(default is 0). It is used for number approximation.
round: round(3.14159, 2) would return 3.14.

all: The all() function returns True if all elements of the iterable are true
(or if the iterable is empty). It is often used to check if all conditions are met.
all: all([True, True, False]) would return False.

